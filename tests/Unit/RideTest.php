<?php namespace Tests\Unit;

use App\Features\RideOffering;
use App\Models\Ride;
use App\Models\User;
use App\Models\Vehicle;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Symfony\Component\Routing\Exception\InvalidParameterException;
use Tests\TestCase;

class RideTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }


    public function test_ride_offering()
    {
        add_user("Rohan", "M", 26);
        add_vehicle("Rohan", "Swift", "KA-01-12345");

        $user = (new User())->getUserByName("Rohan");
        $vehicle = (new Vehicle())->getVehicleByNumber("KA-01-12345");

        $ride_offered = (new RideOffering())
            ->setRideCreator($user)
            ->setVehicle($vehicle)
            ->offerRide("Hyderabad", "Bangalore", 1);

        $this->assertTrue($ride_offered);
        $this->assertDatabaseHas((new Ride())->getTable(), [
            'user_id'       => $user->id,
            'vehicle_id'    => $vehicle->id
        ]);
    }

    public function test_ride_offering_without_ride_creator()
    {
        add_user("Rohan", "M", 26);
        add_vehicle("Rohan", "Swift", "KA-01-12345");

        $vehicle = (new Vehicle())->getVehicleByNumber("KA-01-12345");

        $this->expectException(InvalidParameterException::class);
        $this->expectExceptionMessage("Ride Creator Not Found");

        (new RideOffering())
            ->setVehicle($vehicle)
            ->offerRide("Hyderabad", "Bangalore", 1);
    }

    public function test_ride_offering_without_vehicle()
    {
        add_user("Rohan", "M", 26);

        $user = (new User())->getUserByName("Rohan");

        $this->expectException(InvalidParameterException::class);
        $this->expectExceptionMessage("Vehicle Not Found");

        (new RideOffering())
            ->setRideCreator($user)
            ->offerRide("Hyderabad", "Bangalore", 1);
    }

    public function test_ride_offering_by_helper_method()
    {
        add_user("Rohan", "M", 26);
        add_vehicle("Rohan", "Swift", "KA-01-12345");

        $ride_offered = offer_ride("Rohan", "Hyderabad", '1', "KA-01-12345", "Bangalore");

        $user = (new User())->getUserByName("Rohan");
        $vehicle = (new Vehicle())->getVehicleByNumber("KA-01-12345");

        $this->assertTrue($ride_offered);
        $this->assertDatabaseHas((new Ride())->getTable(), [
            'user_id'       => $user->id,
            'vehicle_id'    => $vehicle->id
        ]);
    }
}
